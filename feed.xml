<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gaigebell.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gaigebell.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-02T14:20:32+00:00</updated><id>https://gaigebell.github.io/feed.xml</id><title type="html">Bell’s Personal Collection</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Atcoder</title><link href="https://gaigebell.github.io/blog/2024/atcoder/" rel="alternate" type="text/html" title="Atcoder"/><published>2024-09-02T14:18:00+00:00</published><updated>2024-09-02T14:18:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/atcoder</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/atcoder/"><![CDATA[<p>[toc]</p> <h3 id="a---369-atcoderjp"><a href="https://atcoder.jp/contests/abc369/tasks/abc369_a">A - 369 (atcoder.jp)</a></h3> <p>#math 给两个整数 $A, B$ ，找一个 $x$ 使得这 3 个数可以排成等差数列. 问这样的 $x$ 有多少个. $1\leq A,B \leq 100$</p> <p>不妨令 $A\leq B$</p> <ol> <li>$x,A,B$ ：$x = A-(B-A)$</li> <li>$A,x,B$ ：$x = \dfrac{A+B}{2}$</li> <li>$A,B,x$ ：$x = B+(B-A)$</li> </ol> <p>第2种要求 $A+B$ 模 2 为 0. 如果 $A=B$ 则 3 种情况下的 $x$ 是相同的.</p> <h3 id="b---piano-3-atcoderjp"><a href="https://atcoder.jp/contests/abc369/tasks/abc369_b">B - Piano 3 (atcoder.jp)</a></h3> <p>#simulation Takahashi 将在钢琴上按顺序按下 $N$ 个琴键，第 $i$ 次按下琴键 $A_i$ ，如果此时 $S_i = \text L$ 那么用左手弹下，如果 $S_i = \text R$ 那么用右手弹下. 最开始疲劳程度为 0 ，当他的一只手从琴键 $x$ 移动到 $y$ 时，疲劳值增加 $|y-x|$ . 找到弹这个谱子的最小疲劳值. $1\leq N\leq 100,1\leq A_i\leq 100$</p> <p>Takahashi 只能按顺序弹，所以直接计算左手累积的疲劳值加上右手累积的疲劳值即可</p> <h3 id="c---count-arithmetic-subarrays-atcoderjp"><a href="https://atcoder.jp/contests/abc369/tasks/abc369_c">C - Count Arithmetic Subarrays (atcoder.jp)</a></h3> <p>#math #combinatorics 给一个有 $N$ 个正整数的序列 $A = (A_1,A_2,…,A_N)$. 计算满足以下要求的整数对 $(l,r)$ 的数量： $1\leq l\leq r\leq N$ 使得 $(A_l,A_{l + 1},…,A_{r})$ 是等差数列 $1\leq N\leq 2\times 10^5,1\leq A_i \leq 10^9$</p> <p>🤓☝️知道如果一个序列 $a_1,…,a_n$ 是等差数列，那么 $\forall 1\leq l\leq r\leq n, a_l,…,a_r$ 都是等差数列. 于是我们考虑找到最长的那些等差数列 $(l_1,r_1),(l_2,r_2),…,(l_m,r_m)$ ，显然 $r_1\leq l_2,r_2\leq l_3,…,r_i\leq l_{i + 1}$ ，那么答案的一部分就是 \(\sum_{i = 1}^m \dfrac{(r_i - l_i + 1)(r_i - l_i)}{2}\) 这里意思是说，根据上面的性质，我们只要看从 $(l,r)$ 里选两个端点，这俩端点之间的序列一定是等差数列，所以就是计算从 $r-l+1$ 个点里选两个的组合数 $\binom{r-l+1}{2}$ 也就是上面那个形式. 然后再加上长度为 1 的数列个数就是答案了.</p> <blockquote> <p>[!code]- Code</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mf">2e5</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">maxn</span> <span class="o">+</span> <span class="mi">5</span><span class="p">],</span><span class="n">d</span><span class="p">[</span><span class="n">maxn</span> <span class="o">+</span> <span class="mi">5</span><span class="p">];</span>
<span class="n">ll</span> <span class="n">ans</span><span class="p">,</span><span class="n">L</span><span class="p">,</span><span class="n">R</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="k">if</span><span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">ans</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
  <span class="n">L</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">R</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
    <span class="p">{</span>
      <span class="n">R</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
      <span class="n">L</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">R</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> <h3 id="d---bonus-exp-atcoderjp"><a href="https://atcoder.jp/contests/abc369/tasks/abc369_d">D - Bonus EXP (atcoder.jp)</a></h3> <p>#dp Takahashi 将按顺序遇到 $N$ 只怪物，第 $i$ 只怪物有力量值 $A_i$. 对于每只怪物，他可以选择放走或者打败它. 每次行动得到的经验值情况如下：</p> <ul> <li>如果放走这只怪物，他将获得 0 经验值</li> <li>如果他击败这只怪物，这只怪物有力量值 $X$ ，那么他将获得 $X$ 经验值.</li> <li>如果这只怪物是第偶数个被击败的，那么他将额外再获得 $X$ 经验值. 求他可以获得的最大经验值. $1\leq N\leq 2\times 10^5,1\leq A_i \leq 10^9$</li> </ul> </blockquote> <p>每次面对怪物都有两种选择，将每次面对怪物视为一个阶段，选择作为决策，同时还需要知道击败的这只怪物是第奇数个被击败还是第偶数个被击败. 考虑 DP. 设 $f(i,0/1)$ 表示遇到第 $i$ 只怪物，最后一个被击败的怪物是第偶数个/第奇数个时的最大经验值.</p> <ul> <li>放走这只怪物 \(f(i,0) = \max(f(i,0),f(i-1,0))\) \(f(i,1) = \max(f(i,1),f(i - 1,1))\)</li> <li>击败这只怪物 \(f(i,0) = \max(f(i,0),f(i - 1,1) + A_i + A_i)\) \(f(i,1) = \max(f(i,1),f(i - 1,0) + A_i)\)</li> </ul> <p>$\max{f(N,0),f(N,1)}$ 即为答案.</p> <blockquote> <p>[!code]- Code</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mf">2e5</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">a</span><span class="p">[</span><span class="n">maxn</span> <span class="o">+</span> <span class="mi">5</span><span class="p">],</span><span class="n">f</span><span class="p">[</span><span class="n">maxn</span> <span class="o">+</span> <span class="mi">5</span><span class="p">][</span><span class="mi">5</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
    <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> <h3 id="e---sightseeing-tour-atcoderjp"><a href="https://atcoder.jp/contests/abc369/tasks/abc369_e">E - Sightseeing Tour (atcoder.jp)</a></h3> <p>#graph/shortest-path/floyd #brute-force #dfs 有 $N$ 个小岛和 $M$ 个连接两个小岛的双向桥. 没有自环，但是两座岛之间有多个桥. 第 $i$ 个桥连接小岛 $U_i$ 和 $V_i$ ，花费时间 $T_i$. 给 $Q$ 个询问，回答这些询问，第 $i$ 个询问内容如下： 现在给 $K_i$ 个不同的桥，$B_{i,1},B_{i,2},…,B_{i,K_i}$， 求出必须经过这些桥的从小岛 $1$ 到小岛 $N$ 的最短用时 你可以以任意方向或顺序穿过这些桥. $2\leq N\leq 400$ $N-1\leq M\leq 2\times 10^5$ $1\leq U_i &lt; V_i \leq N$ $1\leq T_i \leq 10^9$ $1\leq Q\leq 3000$ $1\leq K_i \leq 5$ $1\leq B_{i,1} &lt; B_{i,2} &lt; … &lt; B_{i,K_i} \leq M$</p> </blockquote> <p>题目看着好复杂 TwT… 🤓☝️ $N\leq 400$ ! $K_i \leq 5$ ! $Q\leq 3000$ ! 不妨先用最简单粗暴的方法做一做！ 因为这个必须通过的桥最多只有 5 座，那么通过的顺序一共有 $K!=120$ 种，然后又可以从任意方向通过，又有 $2^K=32$ 种通过方式，总共就是 $3840$ 种方式. 而 $Q\leq 3000$ ，那么直接枚举所有可能性是不会超时的. $N\leq 400$ ，可以用 Floyd 先求出所有小岛之间的最短用时，然后枚举所有情况，比如某种情况是 $V_0 = 1,U_1,V_1,U_2,V_2,…,U_K,V_K,U_{K+1}=N$ 那么用时就是 $\sum dis(U_i,V_{i - 1}) + \sum T_i$ 在所有情况中取最小值即可.</p> <blockquote> <p>[!code]- Code</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mf">2e5</span><span class="p">;</span>
<span class="k">const</span> <span class="n">ll</span> <span class="n">inf</span> <span class="o">=</span> <span class="mf">1e15</span> <span class="o">+</span> <span class="mi">7</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">,</span><span class="n">Q</span><span class="p">,</span><span class="n">K</span><span class="p">;</span>
<span class="k">struct</span> <span class="nc">bridge</span><span class="p">{</span>
  <span class="kt">int</span> <span class="n">from</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">to</span><span class="p">;</span>
  <span class="n">ll</span> <span class="n">ti</span><span class="p">;</span>
<span class="p">}</span><span class="n">b</span><span class="p">[</span><span class="n">maxn</span> <span class="o">+</span> <span class="mi">5</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="n">rec</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
<span class="kt">bool</span> <span class="n">vis</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="n">ll</span> <span class="n">dis</span><span class="p">[</span><span class="mi">505</span><span class="p">][</span><span class="mi">505</span><span class="p">];</span>

<span class="n">ll</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">ll</span> <span class="n">res</span> <span class="o">=</span> <span class="n">inf</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">K</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">dis</span><span class="p">[</span><span class="n">rec</span><span class="p">[</span><span class="n">K</span><span class="o">+</span><span class="n">K</span><span class="p">]][</span><span class="n">N</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
     <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">K</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">from</span><span class="p">;</span>
        <span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">to</span><span class="p">;</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="n">dis</span><span class="p">[</span><span class="n">rec</span><span class="p">[</span><span class="n">now</span><span class="o">+</span><span class="n">now</span><span class="o">-</span><span class="mi">2</span><span class="p">]][</span><span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">ti</span> <span class="o">+</span> <span class="n">solve</span><span class="p">(</span><span class="n">now</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
        <span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">to</span><span class="p">;</span>
        <span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">from</span><span class="p">;</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="n">dis</span><span class="p">[</span><span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]][</span><span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">ti</span> <span class="o">+</span> <span class="n">solve</span><span class="p">(</span><span class="n">now</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
        <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">rec</span><span class="p">[</span><span class="n">now</span> <span class="o">+</span> <span class="n">now</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
  <span class="p">}</span>
  
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span> <span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">else</span> <span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">inf</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">from</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">to</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ti</span><span class="p">;</span>
    <span class="n">dis</span><span class="p">[</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">from</span><span class="p">][</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">dis</span><span class="p">[</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">from</span><span class="p">][</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dis</span><span class="p">[</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">from</span><span class="p">][</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">to</span><span class="p">],</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ti</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">k</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">k</span> <span class="o">++</span><span class="p">)</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span>
        <span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dis</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">dis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">dis</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">Q</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">qq</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">qq</span> <span class="o">&lt;=</span> <span class="n">Q</span><span class="p">;</span><span class="n">qq</span> <span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">K</span><span class="p">;</span><span class="n">rec</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">K</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
      <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> <h4 id="e---apple-baskets-on-circle-atcoderjp"><a href="https://atcoder.jp/contests/abc270/tasks/abc270_e">E - Apple Baskets on Circle (atcoder.jp)</a></h4> <p>#simulation #sort #binary-search 有 $N$ 个篮子围成一圈，第 $i$ 个篮子有 $A_i$ 个苹果，从第 1 个篮子开始，如果当前篮子有苹果就吃 1 个，无论有没有吃上苹果，都到下一个篮子去，重复以上步骤. 当恰好吃了 $K$ 个苹果的时候，每个篮子里还剩多少苹果 $1\leq N \leq 10^5, 0\leq A_i \leq 10^12, 1\leq K \leq 10^12, \sum A_i \geq K$</p> </blockquote> <p>考虑到每个篮子前都会吃 1 个苹果的情况，这个时候所有篮子都有苹果，吃 1 圈就吃掉 $N$ 个苹果，所以当出现空篮子的时候，一定是最少苹果的篮子变空，而这时已经吃了 $A_{min}\times N$ 个苹果. 接着只要把空篮子排除在外，问题又转化为上述情况. 于是可以考虑先将篮子按苹果的多少排个序. 然后可以吃 $A_{min}\times N + A_{min2}\times(N-1) + \cdots$ 个苹果，直至还要吃的苹果数不够吃空最少苹果的篮子，然后特殊处理，最终还要吃的苹果不够吃1圈剩下还有苹果的篮子，这个时候按顺序排序，逐个逐个吃光要吃的苹果数即可.</p> <blockquote> <p>[!code]- Code</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mf">1e5</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">pos</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">K</span><span class="p">,</span><span class="n">acc</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
<span class="k">struct</span> <span class="nc">basket</span><span class="p">{</span>
  <span class="n">ll</span> <span class="n">val</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
<span class="p">}</span><span class="n">a</span><span class="p">[</span><span class="n">maxn</span> <span class="o">+</span> <span class="mi">5</span><span class="p">];</span>

<span class="kt">bool</span> <span class="nf">cmp2</span><span class="p">(</span><span class="n">basket</span> <span class="n">x</span><span class="p">,</span> <span class="n">basket</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">basket</span> <span class="n">x</span><span class="p">,</span> <span class="n">basket</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">val</span> <span class="o">!=</span> <span class="n">y</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">val</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">ll</span> <span class="nf">bisearch</span><span class="p">(</span><span class="n">ll</span> <span class="n">nn</span><span class="p">,</span><span class="n">ll</span> <span class="n">R</span><span class="p">,</span><span class="n">ll</span> <span class="n">tot</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">ll</span> <span class="n">L</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">ll</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">ll</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(;</span><span class="n">L</span> <span class="o">&lt;=</span> <span class="n">R</span><span class="p">;)</span>
  <span class="p">{</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">L</span> <span class="o">+</span> <span class="n">R</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">mid</span> <span class="o">*</span> <span class="n">nn</span> <span class="o">&lt;=</span> <span class="n">tot</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">res</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
      <span class="n">L</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="n">R</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">K</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span><span class="p">;</span>
    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">id</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">sort</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">N</span><span class="p">,</span> <span class="n">cmp</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="n">ll</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">lf</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">-=</span> <span class="n">acc</span><span class="p">;</span>
    <span class="n">lf</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">lf</span><span class="o">*</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">K</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">m</span> <span class="o">=</span> <span class="n">bisearch</span><span class="p">(</span><span class="n">lf</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span><span class="p">,</span><span class="n">K</span><span class="p">);</span>
      <span class="n">acc</span> <span class="o">+=</span> <span class="n">m</span><span class="p">;</span>
      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">-=</span> <span class="n">m</span><span class="p">;</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">val</span> <span class="o">-=</span> <span class="n">acc</span><span class="p">;</span>
      <span class="n">K</span> <span class="o">-=</span> <span class="n">lf</span><span class="o">*</span><span class="n">m</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">K</span> <span class="o">-=</span> <span class="n">lf</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span><span class="p">;</span>
      <span class="n">acc</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span><span class="p">;</span>
      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">sort</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">N</span><span class="p">,</span><span class="n">cmp2</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">K</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">--</span><span class="p">;</span>
      <span class="n">K</span> <span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">&lt;&lt;</span> <span class="sc">' '</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div> </div> </blockquote> <h4 id="d---i-hate-non-integer-number-atcoderjp"><a href="https://atcoder.jp/contests/abc262/tasks/abc262_d">D - I Hate Non-integer Number (atcoder.jp)</a></h4> <p>#dp #combinatorics 给一个长度为 $N$ 的数组 $A = (a_1,…,a_N)$, 有 $2^N - 1$ 种方式从 $A$ 中选出一个或更多数. 其中有多少种方案，选出的数的平均数是整数？答案模 998244353 $1\leq N \leq 100, 1\leq a_i \leq 10^9$</p> <p>考虑到求 $(a_1+…+a_m)\mod m$ 的方案数，这类型的运算满足分配律，可以考察所有组合下对所有可能的模数取模得到的结果的方案数. 具体地说，设 $f(i,j,k,m)$ 表示前 $i$ 个数选了 $j$ 个，模数为 $k$ 结果为 $m$ 的方案数. “前 $i$ 个数选 $j$ 个”明显是求组合选择方案数的经典方法，“模数为 $k$ 结果为 $m$” 则是根据模运算和加法运算结合的性质而想到的. 此时转移方程呼之欲出. \(f(i,j,k,(m+a_i)\bmod k) = f(i-1,j,k,(m+a_i)\bmod k) + f(i-1,j-1,k,m)\) $O(N^4)$ 不满，可过 类似的题目 [[Leetcode Record#<a href="https //leetcode.cn/problems/find-the-largest-palindrome-divisible-by-k/description/">3260. 找出最大的 N 位 K 回文数</a>]]</p> <blockquote> <p>[!code]- Code</p> <pre><code class="language-Cpp">#include&lt;bits/stdc++.h&gt;

using namespace std;
typedef long long ll;
const int maxn = 100;
const ll modn = 998244353;
int N;
ll a[maxn + 5];
ll f[maxn + 5][maxn + 5][maxn + 5][maxn + 5],ans;

int main()
{
  cin &gt;&gt; N;
  for(int i = 1;i &lt;= N;i ++) cin &gt;&gt; a[i];
  // initialization
  for(int i = 0;i &lt;= N;i ++)
    for(ll k = 1;k &lt;= N;k ++)
      f[i][0][k][0] = 1;
//DP
  for(int i = 1;i &lt;= N;i ++)
  {
    for(int j = 1;j &lt;= i;j ++)
    {
      for(ll k = 1;k &lt;= N;k ++)
      {
        for(ll m = 0, p = 0;m &lt; k;m ++)
        {
          p = (m + a[i])%k;
          f[i][j][k][p] = (f[i - 1][j - 1][k][m]%modn + f[i - 1][j][k][p]%modn)%modn;
        }
      }
    }
  }
  for(int j = 1;j &lt;= N;j ++)
  {
    ans = (ans%modn + f[N][j][j][0]%modn)%modn;
    //cout &lt;&lt; f[N][j][j][0] &lt;&lt; endl;
  }
  cout &lt;&lt; ans%modn;
  return 0;
}
</code></pre> </blockquote> <h3 id="agc024">AGC024</h3> <p>#greedy</p> <h4 id="b---backfront">B - Backfront</h4> <p>题意：给一个 $1\sim N$ 的排列 $P$ ，通过以下操作将这个排列排序，使所有元素从小到大排列。</p> <ul> <li>选一个序列中的元素，将它移到序列的开头或者结尾。</li> </ul> <p>问最少要操作多少次才能将序列排好序。</p> <p>搬运 Editorial</p> <p>考虑不用执行操作就已经排好序的子序列满足什么条件：</p> <ul> <li>如果 $x_i &lt; x_{i + 1}$ 那么，要满足 $x_i$ 在 $x_{i + 1}$ 右边。</li> <li>满足 $x_i + 1 = x_{i + 1}$</li> </ul> <p>于是我们可以找出最长的满足以上条件的子序列，然后剩下的元素全部操作一遍就可以将序列排好序。</p> <p>证明考虑贪心，</p> <h3 id="abc184">ABC184</h3> <p>#probabilty/expectation</p> <h4 id="d---increment-of-coins简单期望">D - increment of coins（简单期望）</h4> <p>题意：有三种硬币，分别有 $A,B,C$ 个，每次随机选出一个硬币，然后放回两个相同种类的硬币，直至某种硬币达到 100 个，问期望操作次数。</p> <p>设 $f(a,b,c)$ 表示三种硬币已经分别有 $a,b,c$ 个，到完成目标还需要的操作次数。</p> <p>显然 \(f(a,b,c) = \dfrac{a}{a+b+c}\times f(a + 1,b,c) + \dfrac{b}{a+b+c}\times f(a,b+1,c) + \dfrac{c}{a+b+c}\times f(a,b,c+1)\) 答案即为 $f(A,B,C)$</p> <h3 id="agc046">AGC046</h3> <h4 id="b---extension-dp">B - Extension (DP)</h4> <p>#dp 题意：给出 $A\times B$ 的网格，所有网格涂成白色，通过以下两种操作扩展为 $C\times D$ ：</p> <ol> <li>向上扩展一行，在新增格子中选择一个涂成黑色，其它涂成白色。</li> <li>向右扩展一列，在新增的格子中选择一个涂成黑色，其它涂成白色。</li> </ol> <p>问最后能得到多少种不同的 $C\times D$ 的网格。</p> <p>考虑已经拓展到 $i\times j$ ，有两种情况拓展到 $i\times j$ ：</p> <ol> <li>$(i - 1)\times j\rightarrow i\times j$ ，上一次向上拓展，方案数 $f(i-1,j)\times j$ .</li> <li>$i\times(j-1)\rightarrow i\times j$ ，上一次向右拓展，方案数 $f(i,j - 1)\times i$ .</li> </ol> <p>但是会出现算重的情况，第一种情况中拓展前最右列只有一个黑色格子的情况与第二种情况种拓展前最顶行只有一个黑子格子的情况在拓展后会重复计算，于是考虑去重。</p> <p><img src="C:\Users\47328\Desktop\信息学\notes\AGC046B.png" alt="算重"/></p> <p>不难发现，只要减去一次这些情况的方案数即可，第一种情况中拓展前最右列只有一个黑色格子的情况与第二种情况种拓展前最顶行只有一个黑子格子的情况总和是 $(i - 1)\times(j - 1)\times f(i-1,j-1)$ .</p> <p>于是转移方程为： \(f(i,j) = f(i-1,j)\times j+f(i,j-1)\times i-(i-1)\times(j - 1)\times f(i-1,j-1)\)</p> <h3 id="arc097">ARC097</h3> <h4 id="d---equals-并查集-性质">D - Equals (并查集 性质)</h4> <p>#ds/dsu #property 题意：给一个 $1$ 到 $N$ 的整数排列，再给出 $M$ 对整数对，第 $i$ 对整数对对应着操作：将排列中第 $x_i$ 个数和第 $y_i$ 个数交换。求出按任意顺序执行任意次操作后，最多能使多少 $p_i=i$.</p> <p>建立图论模型，将所有整数对转化为边，构建一个无向图，然后我们发现一个明显的结论：</p> <p>当 $p_i$ 与 $i$ 不在同一连通块中时，不可能做到 $p_i=i$ ，于是继续往连通方面思考。</p> <p>发现当 $p_i$ 与 $i$ 在同一连通块中时，一定可以做到 $p_i = i$ ，推广结论可知统计有多少 $p_i$ 与 $i$ 在同一连通块中即可。</p> <h3 id="arc125">ARC125</h3> <h4 id="b---squares-代数-性质">B - Squares (代数 性质)</h4> <p>#algebra #property</p> <p>题意：给一个整数 $N$ ，找出有多少对整数 $(x,y)$ 满足以下条件：</p> <ul> <li>$1\leqslant x,y \leqslant N$ .</li> <li>$x^2 - y$ 是一个平方数。（$0$ 也是平方数）</li> </ul> <p>自然地列出式子 $x^2 - y = k^2$ ，然后变式得到 $(x+k)(x-k) = y$ ，我们令 $p = (x + k),q = (x-k)$ ，那么问题转化为找出满足以下性质的整数对 $p,q$ ：</p> <ol> <li>$1\leqslant y = pq \leqslant N$ .</li> <li>$x= \dfrac{p+q}{2}$ 是个整数。</li> <li>$1\leqslant x=\dfrac{p+q}{2}\leqslant N$ .</li> <li>$k \geqslant 0 \Leftrightarrow q\leqslant p$ .</li> </ol> <p>于是我们可以枚举 $q$ ，那么 $p$ 的范围就是 $q\leqslant p\leqslant \dfrac{N}{q}$ ，又因为 $\dfrac{p+q}{2}$ 是个整数，所以 $p,q$ 的奇偶性相同，于是我们可以 $O(1)$ 算出对于每个 $q$ ，$p$ 的个数为 \(\left\lceil\dfrac{\lfloor\dfrac{N}{q}\rfloor-q+1}{2}\right\rceil\) 由于 $pq\leqslant N$ ，可以知道枚举 $q$ 不超过 $\sqrt N$ 次，所以时间复杂度 $O(\sqrt N)$ .</p> <h3 id="arc128">ARC128</h3> <h4 id="a---gold-and-silver-性质">A - Gold and Silver (性质)</h4> <p>#trick #property #greedy #dp 题意：最开始手上有 $1\,{\rm g}$ 金子，每一天都有一个汇率 $A_i$ ，第 $i$ 天可以做交易：</p> <ul> <li>如果手上有 $x\,{\rm g}$ 金子，那么全部换成 $(x\times A_i)\,{\rm g}$ 银子。</li> <li>如果手上有 $x\,{\rm g}$ 银子，那么全部换成 $\dfrac{x}{A_i}\,{\rm g}$ 金子。</li> </ul> <p>求出每一天的交易方案使得最后一天得到的金子最多。</p> <p>这种交易问题常见的 trick 是：这一天不进行交易等价于在同一天中买入后卖出。</p> <p>于是考虑如果有一种最优情况是第 $i$ 天将金子换成银子，第 $j$ 天将银子换成金子，那么实际上可以看作： \(x\times\dfrac{A_i }{ A_{i + 1}}\times\dfrac{A_{i + 1}}{A_{i+2}}\times\cdots\times\dfrac{A_{j-1}}{A_j}\) 显然根据贪心，可以知道当 $A_i &gt; A_{i + 1}$ 的时候就进行交易即可。</p> <p>当然也可以考虑 DP ，但是由于精度问题，要用另一个 trick ：将乘除转为加减 \(\log\dfrac{a}{b} = \log a - \log b,\log ab = \log a + \log b\) 于是我们将其转化为对数运算。</p> <p>设 $f(i)$ 表示第 $i$ 天可以获得的最多的金子， $g(i)$ 表示第 $i$ 天可以获得的最多的银子，直接 $f$ 与 $g$ 之间互相转移即可： \(f(i) = \max\{f(i-1),g(i-1)+\log A_i\}\\ g(i) = \max\{g(i - 1),f(i - 1) - \log A_i\}\) 记录 DP 过程的转移顺序即可。这个 trick 本身其实也受精度的影响，正确性不如上一个 trick 稳定。</p> <h3 id="abc224">ABC224</h3> <h4 id="d---8-puzzle-on-graph-图论-最短路-暴力">D - 8 Puzzle on Graph (图论 最短路 暴力)</h4> <p>#graph/shortest-path #brute-force 题意：有 $9$ 个结点，有标号 $ 1\sim 8$ 的棋子放在其中的 $8$ 个结点上，给出结点之间的无向边，每次可以将一个棋子从一个结点移到另一个空结点上，问最少要操作多少次才能使棋子 $i$ 在结点 $i$ 上。</p> <p>考虑其状态的表示，我们可以用字符串表示当前棋盘的状态，令字符串的第 $i$ 位表示结点 $i$ 上的棋子编号，令 $9$ 表示结点为空。于是要求从给出的状态 $s$ 转移到状态 $123456789$ 的最少步数。</p> <p>我们发现，这样表示状态，其可能的方案数有 $9!=362880$ 种，状态数比较小，所以可以暴力搜索。</p> <p>用 <code class="language-plaintext highlighter-rouge">map</code> 存下每个状态对应的最小操作数，然后用类似最短路的思路做即可。</p> <h4 id="e---integers-on-grid-dp-优化">E - Integers on Grid (DP 优化)</h4> <p>#dp #optimization 题意：给一个 $H\times W$ 的网格，其中有 $N$ 个格子的值为 $A(i,j)$ ，其余的格子的值均为 $0$.你有一个棋子，最开始放在某一个格子 $(i,j)$ 上，这个棋子可以移动到另一个格子 $(x,y)$ 当且仅当：</p> <ul> <li>$A(i,j) &lt; A(x,y)$.</li> <li>$(i,j)$ 和 $(x,y)$ 在同一列或者同一行.</li> </ul> <p>现在问若最开始将棋子放在第 $i$ 个有值的格子上，最多能移动多少步，对所有的 $i=1,2,\ldots,N$ 求出这个答案。</p> <p>考虑 DP ，设 $f(i)$ 表示从格子 $i$ 开始最多能移动的步数。由于棋子只能从值大的格子移到值小的格子，所以在一开始将有值的格子按值从大到小排好序，我们就可以进行线性 DP. \(f(i) = \max\{f(j)|j&lt;i,A_j&gt;A_i,x_i=x_j \;{\rm or}\;y_i=y_j\}\) 不难发现，这样 DP 是 $O(N^2)$ 的，我们需要对其进行优化。我们可以将每一行和每一列的最大步数记下来，转移的时候就可以做到 $O(1)$ 转移了，然后再在适当的时候，对每一行和每一列的最大步数更新，这样就能够保证答案的正确性，并且得到一个优秀复杂度的算法。</p> <h4 id="f---problem-where-s-separate-digits-拆分贡献-转化为期望与概率">F - Problem where +s Separate Digits (拆分贡献 转化为期望与概率)</h4> <p>#probabilty/expectation 题意：给一个只包含数字的字符串 $S$ ，可以在任意两个数字之间加 <code class="language-plaintext highlighter-rouge">+</code> ，可以加任意次，使 $S$ 组成一个表达式 $T$ ，现在求对于所有 $T$ 的值的和。</p> <p>显然，我们可以单独考虑每一位数字对答案的贡献。一位数字可能作为个位出现，也可能作为百位或千位或更高位出现，那么我们要计算在所有可能的 $T$ 中，对于第 $i$ 位数字 $S_i$ ，它作为个位、百位、千位…的方案数有多少。</p> <p>我们可以将其转换为概率期望问题，对于所有的 $T$ 我们等概率地得到一个 $T’$ ，问 $T’$ 的值的期望是多少，当我们求出这个期望 $E$ 的时候，由期望的定义可知，答案即为 $E\times 2^{Len(S)-1}$ .</p> <p>现在考虑从末尾往开头第 $i$ 位作为一个数中某一位的情况与其概率：</p> <ul> <li> <p>作为个位，只要在 $i$ 与 $i + 1$ 间加 <code class="language-plaintext highlighter-rouge">+</code> 即可，概率 $\dfrac{1}{2}$ .</p> </li> <li>作为十位，$i$ 与 $i + 1$ 间没有 <code class="language-plaintext highlighter-rouge">+</code> ，$i+1$ 与 $i+2$ 间有 <code class="language-plaintext highlighter-rouge">+</code> ，概率 $\dfrac{1}{4}$ .</li> <li>$\cdots\cdots$</li> <li>贡献系数为 $10^{i-2}$ ，概率 $\dfrac{1}{2^{i-1}}$ .</li> <li>贡献系数为 $10^{i-1}$ ，$i$ 后面没有 <code class="language-plaintext highlighter-rouge">+</code>，概率与贡献系数为 $10^{i-2}$ 的情况一样，是 $\dfrac{1}{2^{i-1}}$ .</li> </ul> <p>那么这个数对期望的贡献就是 \(S_i\times\sum_{j=1}^{i-1} \left(10^{j-1}\times\dfrac{1}{2^j}\right)\times10^{i-1}\times\dfrac{1}{2^{i-1}}\) 后面那一大块贡献系数，有前缀性质，可以边计算贡献边计算系数，时间复杂度 $O(N)$ .</p> <h3 id="abc227">ABC227</h3> <h4 id="d---project-planning-二分答案">D - Project Planning (二分答案)</h4> <p>#binary-search 题意：有 $N$ 个部门，第 $i$ 个部门的人数为 $A_i$ ，一个项目需要恰好 $K$ 个来自不同部门的人完成，问最多可以完成多少项目。</p> <p>考虑贪心，我们可以采用如下贪心策略：每次为一个项目选人的时候，都从可选人数最多的 $K$ 个部门选择。</p> <p>但是如果我们逐次进行上述操作，那么时间复杂度将很大。我们发现，答案具有单调性，于是考虑二分答案。二分一个答案 $P$ ，考虑能否完成 $P$ 个项目，对部门的人数进行分类讨论：</p> <ol> <li>$A_i &lt; P$ ，部门 $i$ 最多派出 $A_i$ 人，参与 $A_i$ 个不同的项目。</li> <li>$A_i \geqslant P$ ，部门 $i$ 最多派出 $P$ 人，参与这 $P$ 个不同的项目。</li> </ol> <p>于是只要判断 $\sum\min{A_i,P}$ 与 $P\times K$ 的关系即可知道能否完成 $P$ 个项目。</p> <h3 id="abc226">ABC226</h3> <h4 id="a---round-decimals-339">A - Round decimals (3:39)</h4> <p>题意：给一个三位小数的浮点数，输出离它最近的整数。</p> <p>因为给出的数是非负的，所以小数部分大于 $0.5$ 就输出整数部分 + 1，否则输出整数部分。</p> <h4 id="b---counting-arrays-1720">B - Counting Arrays (17:20)</h4> <p>题意：给出 $N$ 个数组，问有多少个不同的数组。</p> <p>将数组转成字符串，每个元素间加空格，然后排个序统计一下就水过了。</p> <h4 id="c---martial-artist-1051">C - Martial artist (10:51)</h4> <p>#graph 题意：有 $N$ 个动作可以学，第 $i$ 个动作用时 $T_i$ ，学第 $i$ 个动作前要先学 $A_{i,1},A_{i,2},\cdots ,A_{i,K_i}$ 并且 $A_{i,j}&lt;i,1\leqslant j \leqslant K_i$，问从 $0$ 开始学，学完第 $N$ 个动作至少要多少时间。</p> <p>建立图论模型，不难发现，最后形成一个 DAG 并且最终汇聚在 $N$ 结点，于是将所有边反向，转化为 $N$ 单源的图，从 $N$ 开始 DFS 将所有遍历到的结点的时间加起来即为答案。</p> <h4 id="d---teleportation-4413">D - Teleportation (44:13)</h4> <p>#greedy #algebra 题意：有 $N$ 个城镇，坐标为 $(x_i,y_i)$ ，在坐标 $(x,y)$ 使用一次咒语 $(a,b)$ 可以使你传送到 $(x + a,y + b)$ ，现在问咒语集合中至少要有多少个咒语，使得对于每对城镇 $i,j(i\neq j)$ ，可以从集合中选出一个咒语，反复运用若干次后可以从 $i$ 传送到 $j$.</p> <p>贪心，要令集合大小最小，就要让其中的咒语的适用性尽可能强。我们可以将每对城镇间的路径用向量表示，如果有多个向量方向相同，显然只要将它们的单位向量作为咒语就可以用一个咒语走过这些路径。</p> <p>于是求出所有向量的坐标表示，并求出它们的单位向量，在所有单位向量中去重后，就是答案集合。</p> <h4 id="e---just-one-7249-图论-性质">E - Just one (72:49) (图论 性质)</h4> <p>#graph #property 题意：给出一张 $N$ 个结点和 $M$ 条边的无向图，没有自环和重边，问有多少种方案钦定所有边的方向使得每一个点出度为 1.</p> <p>找性质，先从简单情况开始研究。图论题可以考虑研究基础的图论模型，比如链、树、环等。</p> <p>考虑一条链的情况，发现方案数为 0 ，总有一个点出度为 0 .</p> <p>考虑一棵树的情况，发现方案数为 0 .</p> <p>考虑一个简单环的情况，发现方案数为 2 ，只要令环中的所有边同向即合法。</p> <p>然后研究一下基础模型组合的情况，就可以发现性质：当一个连通块有且仅有一个简单环的时候，有 2 种钦定边的方案使这个连通块合法。</p> <p>证明：显然，只有当图中的边数与点数相等的时候，每个点才能恰好被分配一条出边。如果边数大于点数，那么一定存在一个点出度为 2 .</p> <p>于是得证。当整个图中出现非法连通块的时候，方案数就为 0 ；如果全部连通块合法，那么总方案数就是 $2^k$ 其中 $k$ 为连通块的个数。</p> <h4 id="f---score-of-permutations">F - Score of Permutations</h4> <h4 id="g---the-baggage-贪心">G - The baggage (贪心)</h4> <h4 id="h---random-kth-max-期望">H - Random Kth Max (期望)</h4> <h3 id="abc225-virtual-participation">ABC225 (Virtual Participation)</h3> <h4 id="a---distinct-strings-518">A - Distinct Strings (5:18)</h4> <p>题意：给 3 个小写字母，问能组合成多少种字符串。</p> <p>显然答案与有多少个字母相同有关。</p> <ol> <li>全部相同时答案为 1</li> <li>有两个相同时答案为 3</li> <li>互不相同时答案为 6</li> </ol> <p>暴力特判输出即可。</p> <h4 id="b---star-or-not-812">B - Star or Not (8:12)</h4> <p>#graph 题意：给出一个图，问其是否星星图（菊花图），星星图的定义为有一个结点直接连接其它所有结点。</p> <p>根据定义，花蕊的性质就是度为 $N-1$ ，检查所有结点中是否存在即可。</p> <h4 id="c---calendar-validator-2513">C - Calendar Validator (25:13)</h4> <p>题意：给一个 $10^{100}\times 7$ 的矩阵 $A$ ，$A_{i,j}=(i-1)\times7+j$，再给一个矩阵 $B$ ，问矩阵 $B$ 在不旋转的情况下，是否是 $A$ 的子矩阵。</p> <p>可以先确定 $B$ 中的一个元素，然后推得是 $A$ 的子矩阵的 $B’$ ，然后对比 $B$ 和 $B’$ 即可。</p> <p>推出 $B$ 的左上角可能在 $A$ 的位置 $(i,j)$ ，然后枚举 $B$ 中的每一个元素，判断其是否与计算推理出来的值相同即可。</p> <h4 id="d---play-train-4403">D - Play Train (44:03)</h4> <p>#simulation #ds/list 题意：有 $N$ 辆玩具车，给出 $Q$ 次操作和询问，一共有三种类型：</p> <ol> <li><code class="language-plaintext highlighter-rouge">1 x y</code> 令 $x$ 的尾部与 $y$ 的头部相连。保证 $x\neq y$ ，$x$ 的尾部和 $y$ 的头部在此操作前没有与其它车相连，在此操作前 $x$ 和 $y$ 属于不同列车组。</li> <li><code class="language-plaintext highlighter-rouge">2 x y</code> 令 $x$ 的尾部与 $y$ 的头部分离。保证 $x\neq y$ ，此操作前 $x$ 的尾部与 $y$ 的头部相连。</li> <li><code class="language-plaintext highlighter-rouge">3 x</code> 从头至尾地输出 $x$ 所在的列车组的所有玩具车编号。</li> </ol> <p>模拟链表操作即可，对每个玩具车记录前驱 ${\rm pre}(x)$ 和后继 ${\rm nxt}(x)$ 。输出的时候，从 $x$ 开始一直访问前前驱，然后倒序输出，再一直访问后继顺序输出即可做到 $O(n)$.</p> <h4 id="e---フ7-贪心">E - フ/7 (贪心)</h4> <p>#greedy 题意：在一个平面上，给出若干个”7”形状的图案，问以最优方式删除一些”7”，最多有多少个”7”可以在原点完全可视。”7”由两条线段 $AB,BC$ 组成，其中 $A(x_i - 1,y_i),B(x_i,y_i),C(x_i,y_i-1)$ .一个”7”在原点完全可视，当且仅当四边形 $OABC$ 不与任何其它图案”7”相交。</p> <p><img src="C:\Users\47328\Desktop\信息学\notes\7.png" alt="7"/></p> <p>如图所示，红色的图案即为”7”，并且可以知道，图案 1 不是完全可视的，因为其与原点组成的四边形与图案 2 相交。</p> <p>我们可以尝试发掘两个图案互不遮挡的条件。</p> <p>可以发现，一个图案将遮挡从原点到图案的两条边所在的两条射线所夹的区域，令靠近 $y$ 轴的直线斜率为 $k_1$ ，靠近 $x$ 轴的直线斜率为 $k_2$ ，于是对于两个图案 $p,q$ 有：</p> <ul> <li>两个图案互不遮挡当且仅当 $k_{1p}\leqslant k_{2q}$ 或 $k_{1q}\leqslant k_{2p}$</li> </ul> <p><img src="C:\Users\47328\Desktop\信息学\notes\7(2).png" alt="7(2)"/></p> <p>所以我们可以用区间表达”7”，一个图案”7”所占有的区间就是 $[k_2,k_1]$ ，于是问题转化为求最多互不相交区间。</p> <p>经典贪心，按右端点从小到大排序，每次先选右端点小的即可得到答案。</p> <p>比较斜率的 Trick (高中解析几何基础) : $k_1 = \dfrac{y_1}{x_1},k_2=\dfrac{y_2}{x_2},k_1 &lt; k_2 \Leftrightarrow y_1x_2&lt;y_2x_1$</p> <h4 id="f---string-cards-贪心-dp">F - String Cards (贪心 DP)</h4> <p>#greedy #dp 题意：给出 $N$ 张卡牌，每张卡牌上面有一个字符串，要求从中选 $K$ 个，并自由排列组合后，使得字典序最小的方案。字典序相同时长度小的字符串字典序更小。</p> <p><a href="https://atcoder.jp/contests/abc225/editorial/2850">官方题解</a>很详细，这里搬运翻译一下，并稍作批注：</p> <p>介绍 4 种错解，并举出它们的反例。</p> <h5 id="错解-1">错解 1</h5> <blockquote> <p>将 $(S_1,\ldots ,S_N)$ 排序，使得 $S_i\leqslant S_{i + 1}$.</p> <p>将前 $K$ 个字符串首尾相连作为答案.</p> </blockquote> <p>反例：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 2
b
ba
</code></pre></div></div> <p>正确答案 <code class="language-plaintext highlighter-rouge">bab</code> ，程序输出 <code class="language-plaintext highlighter-rouge">bba</code>.</p> <p>显然没有考虑到字符串长度不一的条件。</p> <h5 id="错解-2-考场上就想到这">错解 2 (考场上就想到这…)</h5> <blockquote> <p>将 $(S_1,\ldots ,S_N)$ 排序，使得 $S_i+S_{i+1}\leqslant S_{i+1}+S_{i}$.</p> <p>将前 $K$ 个字符串首尾相连作为答案.</p> </blockquote> <p>反例：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 1
b
ba
</code></pre></div></div> <p>正确答案 <code class="language-plaintext highlighter-rouge">b</code> ，程序输出 <code class="language-plaintext highlighter-rouge">ba</code>.</p> <p>没有考虑到作为结尾的字符串后面不需再加字符串。</p> <h5 id="错解-3">错解 3</h5> <blockquote> <p>将 $(S_1,\ldots ,S_N)$ 排序，使得 $S_i+S_{i+1}\leqslant S_{i+1}+S_{i}$.</p> <p>设 $f(i,j)$ 表示在前 $i$ 个字符串中选出 $j$ 个首尾相连的最小字典序的字符串，</p> <p>转移方程 $f(i,j) =\min{f(i-1,j),f(i-1,j-1)+S_i}$</p> <p>答案为 $f(N,K)$.</p> </blockquote> <p>反例：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3 2
baa
ba
b
</code></pre></div></div> <p>正确答案 <code class="language-plaintext highlighter-rouge">baab</code> ，程序输出 <code class="language-plaintext highlighter-rouge">baaba</code>.</p> <p>同样是没有考虑到作为结尾的字符串后面不需再加字符，从前往后考虑总会使得正确答案是程序输出的前缀，于是在字符串长度的差异上，程序输出字典序总大于正确答案。</p> <h5 id="错解-4">错解 4</h5> <blockquote> <p>将 $(S_1,\ldots ,S_N)$ 排序，使得 $S_i+S_{i+1}\leqslant S_{i+1}+S_{i}$.</p> <p>设 $f(i,j)$ 表示在前 $i$ 个字符串中选出 $j$ 个首尾相连的最小字典序的字符串，</p> <p>转移方程 \(f(i,j) =\min\{f(i-1,j),\min_{k&lt;i}\{f(i-1,j-1)+S_i\}\}\) 答案为 $f(N,K)$.</p> </blockquote> <p>反例：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4 3
bbaba
bba
b
b
</code></pre></div></div> <p>正确答案 <code class="language-plaintext highlighter-rouge">bbababb</code> ，程序输出 <code class="language-plaintext highlighter-rouge">bbababbab</code>.</p> <p>还是老问题，转移过程中增加参与转移的状态并不能消除无法考虑到结尾字符串后面不需再加字符串的问题，还是会使输出成为答案的前缀。</p> <h5 id="正解">正解</h5> <p>将 $(S_1,\ldots ,S_N)$ 排序，使得 $S_i+S_{i+1}\leqslant S_{i+1}+S_{i}$ . 这一步是必须的，因为它保证了这些字符串从前往后选或者从后往前选都一定能取得最佳方案，这样排序的原理就是贪心中的相邻交换法，我们发现错解 1 之所以错是因为令两个长度不一的字符串比较，但它们组合起来以后的情况与两个独立的字符串的情况完全不同，所以正解排序通过比较两个长度相同的字符串解决了这一问题。（原题解有详细证明）这一步排序提供了一种 DP 的顺序，消除了原问题的后效性，为 DP 做铺垫。</p> <p>然后从上面的错解，我们知道，后面几种看似十分接近正解的解法，问题都出现在不能选择到最优的作为结尾的字符串，所以为什么不考虑先从后面开始选呢？设 $f(i,j)$ 表示在 $(S_i,\ldots ,S_N)$ 中选出 $j$ 个字符串首尾相连得到的最小字典序的字符串。那么对于枚举到一个新的字符串，我们有两种决策，一种是抛弃它，另一种是将其作为先前最优解的开头，于是有： \(f(i,j) = \min\{f(i+1,j),S_i + f(i+1,j-1)\}\) 好了，现在可以总结一下这道题了。</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">tot</span><span class="p">;</span>
<span class="n">string</span> <span class="n">s</span><span class="p">[</span><span class="mi">55</span><span class="p">],</span><span class="n">f</span><span class="p">[</span><span class="mi">55</span><span class="p">][</span><span class="mi">55</span><span class="p">],</span><span class="n">inf</span><span class="p">;</span>

<span class="n">string</span> <span class="nf">smin</span><span class="p">(</span><span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">string</span> <span class="n">s2</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">s1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">s2</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">(</span><span class="n">len1</span><span class="p">,</span><span class="n">len2</span><span class="p">);</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
		<span class="k">if</span><span class="p">(</span><span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">return</span> <span class="p">(</span><span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">?</span> <span class="n">s1</span> <span class="o">:</span> <span class="n">s2</span><span class="p">);</span>
	<span class="k">return</span> <span class="p">(</span><span class="n">len1</span> <span class="o">&lt;</span> <span class="n">len2</span> <span class="o">?</span> <span class="n">s1</span> <span class="o">:</span> <span class="n">s2</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">string</span> <span class="n">s2</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">string</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">s2</span><span class="p">;</span>
	<span class="n">string</span> <span class="n">s4</span> <span class="o">=</span> <span class="n">s2</span> <span class="o">+</span> <span class="n">s1</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">s3</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
		<span class="k">if</span><span class="p">(</span><span class="n">s3</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">s4</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">return</span> <span class="n">s3</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">s4</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="k">return</span> <span class="n">s1</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">s2</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">"%d%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">K</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">tot</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">s</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">N</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">tot</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="n">inf</span> <span class="o">+=</span> <span class="s">"z"</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span>
			<span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">inf</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">N</span><span class="p">,</span><span class="n">ii</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">--</span><span class="p">,</span><span class="n">ii</span> <span class="o">++</span><span class="p">)</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">min</span><span class="p">(</span><span class="n">ii</span><span class="p">,</span><span class="n">K</span><span class="p">);</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">smin</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
<span class="c1">//			printf("f(%d,%d) : ",i,j);cout &lt;&lt; f[i][j] &lt;&lt; endl;</span>
		<span class="p">}</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">K</span><span class="p">];</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="g---x-网络流-最小割">G - X (网络流 最小割)</h4> <p>#network-flow/minimum-cut 题意：给一个 $H$ 行 $W$ 列的网格，每一个正方形网格 $(i,j)$ 权值为 $A_{i,j}$ ，现在想给若干个网格画上 X ，即连上两条对角线，其它网格不能画任何东西，问最大得分是多少。定义得分为画上 X 的网格的权值和减去一个常数 $C$ 与最少笔画数的乘积，即 ${\rm score} = \sum A_{i,j} - C\times n$.</p> <p>翻译一下题解并稍作批注</p> <p>官方题解通过题意转化与简化操作类型，将原问题转化为一个最小割问题。</p> <p>首先要考虑用于画 X 的最小线段数怎么求。</p> <ul> <li>对于网格 $(i,j)$ ，当它的左上角 $(i-1,j-1)$ 或右下角 $(i+1,j+1)$ 有画了 X 的网格时，它可以少画一笔。</li> <li>对于网格 $(i,j)$ ，当它的左下角 $(i - 1,j + 1)$ 或右上角 $(i + 1,j - 1)$ 有花了 X 的网格时，它可以少画一笔。</li> </ul> <p>然后可以将以上条件等价为 ：</p> <ul> <li>对于网格 $(i,j)$ ，当它的左上角没有画了 X 的网格，那么它就要多画一笔。</li> <li>对于网格 $(i,j)$ ，当它的左下角没有画了 X 的网格，那么它就要多画一笔。</li> </ul> <p>于是画 X 的最小线段数 $n=n_1+n_2$ ，$n_1$ 为满足以上第一种情况的网格数， $n_2$ 为满足以上第二种情况的网格数。</p> <p>然后就将问题转化为：</p> <blockquote> <p>对于每个网格，可以选择画或者不画，如果画了，就得到分数 $A_{i,j}$ ，不画就不得分。</p> <p>同时，对于每一个画了的网格，如果左上角的网格没有画，就使答案减去 $C$ ，如果右上角的网格没有画，也使答案减去 $C$ .求最大得分。</p> </blockquote> <p>求最大得分不好求，那就考虑求最小代价，将问题转化为：</p> <blockquote> <p>对于每个网格，可以选择画或者不画，如果画了，就没有增加代价，如果不画，就增加代价 $A_{i,j}$.</p> <p>同时，对于每一个画了的网格，如果左上角的网格没有画，就增加代价 $C$ ，如果右上角的网格没有画，也增加代价 $C$ .求最小代价。</p> </blockquote> <p>于是可以通过建立网络流模型，将上述问题转化为最小割问题。</p> <p>考虑怎么建图。考虑我们的图是怎么样的，对于不画的格子，只能增加代价 $A_{i,j}$ ，并且不会有更多的代价增加，所以割断这一类边后，不需要再割这个格子的其它边。而对于画了的格子，代价为 $A_{i,j}$ 的边一定不被割掉，会有代价为 $0$ 的边，还会有代价 $C$ 的边，当其左上角和右上角的格子都画了 X 时，就会割掉代价为 $0$ 的边，否则割掉一条或两条代价为 $C$ 的边。</p> <p>于是建立一个源点 $S$ ，一个汇点 $T$ ，按一下方案建图：</p> <ol> <li>源点 $S$ 向分别所有网格连一条代价为 $A_{i,j}$ 的边。</li> <li>对于所有左上角没有网格的网格，分别向汇点连一条代价为 $C$ 的边。</li> <li>对于所有左下角没有网格的网格，分别向汇点连一条代价为 $C$ 的边。</li> <li>对于所有左上角有网格的网格，向汇点连一条代价为 $0$ 的边，向左上角的网格连一条代价为 $C$ 的边。</li> <li>对于所有左下角有网格的网格，向汇点连一条代价为 $0 $ 的边，向左下角的网格连一条代价为 $C$ 的边。</li> </ol> <p>于是求出最小代价后，用总价值减去最小代价即为答案 ${\rm Ans} = \sum A_{i,j} - {\rm mincost}$</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="n">ll</span> <span class="n">inf</span> <span class="o">=</span> <span class="mh">0xfffffffff</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">A</span><span class="p">[</span><span class="mi">105</span><span class="p">][</span><span class="mi">105</span><span class="p">],</span><span class="n">C</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">H</span><span class="p">,</span><span class="n">W</span><span class="p">,</span><span class="n">cnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">tot</span><span class="p">,</span><span class="n">map</span><span class="p">[</span><span class="mi">105</span><span class="p">][</span><span class="mi">105</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">head</span><span class="p">[</span><span class="mi">50005</span><span class="p">],</span><span class="n">p</span><span class="p">[</span><span class="mi">50005</span><span class="p">],</span><span class="n">dep</span><span class="p">[</span><span class="mi">50005</span><span class="p">];</span>

<span class="k">struct</span> <span class="nc">edge</span><span class="p">{</span>
	<span class="kt">int</span> <span class="n">nxt</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">to</span><span class="p">;</span>
	<span class="n">ll</span> <span class="n">cap</span><span class="p">;</span>
<span class="p">}</span><span class="n">e</span><span class="p">[</span><span class="mi">500005</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">addedge</span><span class="p">(</span><span class="kt">int</span> <span class="n">from</span><span class="p">,</span><span class="kt">int</span> <span class="n">to</span><span class="p">,</span><span class="n">ll</span> <span class="n">val</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">cnt</span> <span class="o">++</span><span class="p">;</span>
	<span class="n">e</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">nxt</span> <span class="o">=</span> <span class="n">head</span><span class="p">[</span><span class="n">from</span><span class="p">];</span>
	<span class="n">e</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">to</span> <span class="o">=</span> <span class="n">to</span><span class="p">;</span>
	<span class="n">e</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">cap</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
	<span class="n">head</span><span class="p">[</span><span class="n">from</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
	<span class="n">cnt</span> <span class="o">++</span><span class="p">;</span>
	<span class="n">e</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">nxt</span> <span class="o">=</span> <span class="n">head</span><span class="p">[</span><span class="n">to</span><span class="p">];</span>
	<span class="n">e</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">to</span> <span class="o">=</span> <span class="n">from</span><span class="p">;</span>
	<span class="n">e</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">cap</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">head</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
	<span class="k">return</span> <span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">bfs</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">memset</span><span class="p">(</span><span class="n">dep</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">dep</span><span class="p">));</span>
	<span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span><span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span><span class="n">dep</span><span class="p">[</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(;</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">();)</span>
	<span class="p">{</span>
		<span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
		<span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">head</span><span class="p">[</span><span class="n">u</span><span class="p">],</span><span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="p">;</span><span class="n">i</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">nxt</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">to</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">cap</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dep</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
				<span class="n">dep</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">dep</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">dep</span><span class="p">[</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">ll</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">now</span><span class="p">,</span><span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">ll</span> <span class="n">flow</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="n">t</span> <span class="o">||</span> <span class="n">flow</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">flow</span><span class="p">;</span>
	<span class="n">ll</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">now</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">nxt</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">to</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">cap</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dep</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">dep</span><span class="p">[</span><span class="n">now</span><span class="p">])</span>
		<span class="p">{</span>
			<span class="n">ll</span> <span class="n">fl</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">flow</span><span class="p">,</span><span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">cap</span><span class="p">));</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">fl</span><span class="p">;</span>
			<span class="n">flow</span> <span class="o">-=</span> <span class="n">fl</span><span class="p">;</span>
			<span class="n">e</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">cap</span> <span class="o">-=</span> <span class="n">fl</span><span class="p">;</span>
			<span class="n">e</span><span class="p">[</span><span class="n">i</span> <span class="o">^</span> <span class="mi">1</span><span class="p">].</span><span class="n">cap</span> <span class="o">+=</span> <span class="n">fl</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="n">flow</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>	
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Dinic</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ll</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">bfs</span><span class="p">())</span>
	<span class="p">{</span>
		<span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">head</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
		<span class="n">ans</span> <span class="o">+=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span><span class="n">inf</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%lld"</span><span class="p">,</span><span class="n">sum</span> <span class="o">-</span> <span class="n">ans</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">"%d%d%lld"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">H</span><span class="p">,</span><span class="o">&amp;</span><span class="n">W</span><span class="p">,</span><span class="o">&amp;</span><span class="n">C</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">H</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span> <span class="n">W</span><span class="p">;</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">scanf</span><span class="p">(</span><span class="s">"%lld"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
			<span class="n">tot</span> <span class="o">++</span><span class="p">;</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">tot</span><span class="p">;</span>
			<span class="n">sum</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
		<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">H</span><span class="p">;</span><span class="n">i</span> <span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">W</span><span class="p">;</span><span class="n">j</span> <span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">addedge</span><span class="p">(</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
			<span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">addedge</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
			<span class="k">else</span> <span class="n">addedge</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">map</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span><span class="n">C</span><span class="p">),</span><span class="n">addedge</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
			<span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">H</span> <span class="o">||</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">addedge</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
			<span class="k">else</span> <span class="n">addedge</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">map</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span><span class="n">C</span><span class="p">),</span><span class="n">addedge</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">tot</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">Dinic</span><span class="p">();</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span> 
</code></pre></div></div> <h4 id="h---social-distance-2-组合数学">H - Social Distance 2 (组合数学)</h4> <p>#combinatorics 题意：有 $N$ 张椅子，每张椅子只能坐一个人，有 $M$ 个人将坐在这其中的 $M$ 张椅子上，定义得分为 \(\prod_{i=1}^{M-1}(B_{i + 1}-B_i)\) 其中 $B=(B_1,B_2,\ldots ,B_M)$ 是每一个人所做的椅子的编号。</p> <p>已经有 $K$ 个人坐在编号为 $A_1,A_2,\ldots,A_K$ 的椅子上了，计算剩下的 $M-K$ 个人就座的所有方案的得分总和。</p> <p>翻译官方题解并稍作批注。</p> <p>在题目要求区分这 $M-K$ 个还没有座位的人，我们不妨暂时忽略他们具体是谁，在计算出一些结果后再乘上排列数即可。</p> <p>考虑计算以下几种值：</p> <blockquote> <p>$f_1(n,k)$ 表示有人已经坐在这 $n$ 张椅子中最左端的椅子和最右端的椅子，并且还有 $k$ 个人要就座所有方案的得分总和。</p> <p>$f_2(n,k)$ 表示有人已经坐在这 $n$ 张椅子中最左端的椅子，并且还有 $k$ 个人要就座所有方案的得分总和。</p> <p>$f_3(n,k)$ 表示 $k$ 个人坐在 $n$ 张空椅子上的所有方案的得分总和。</p> </blockquote> <p>原文介绍了生成函数和组合计数两种方法计算 $f_1$ ，本文只搬运其介绍组合计数的部分。</p> <p>不会了…咕咕…</p>]]></content><author><name></name></author><category term="articles"/><category term="atcdoer"/><summary type="html"><![CDATA[solutions for atcoder problems]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://gaigebell.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://gaigebell.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://gaigebell.github.io/blog/2024/tabs</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="1c32714d-32b0-4649-a5c8-998d30f30ea6" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="1c32714d-32b0-4649-a5c8-998d30f30ea6" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="22148126-06ed-4adf-8958-4df0b2708b21" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="22148126-06ed-4adf-8958-4df0b2708b21" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="54d63242-bcfb-43e6-a9b6-63c2d1ce0bf8" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="54d63242-bcfb-43e6-a9b6-63c2d1ce0bf8" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://gaigebell.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://gaigebell.github.io/blog/2024/typograms</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://gaigebell.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://gaigebell.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://gaigebell.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://gaigebell.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://gaigebell.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry><entry><title type="html">a post with geojson</title><link href="https://gaigebell.github.io/blog/2024/geojson-map/" rel="alternate" type="text/html" title="a post with geojson"/><published>2024-01-26T17:57:00+00:00</published><updated>2024-01-26T17:57:00+00:00</updated><id>https://gaigebell.github.io/blog/2024/geojson-map</id><content type="html" xml:base="https://gaigebell.github.io/blog/2024/geojson-map/"><![CDATA[<p>This is an example post with some <a href="https://geojson.org/">geojson</a> code. The support is provided thanks to <a href="https://leafletjs.com/">Leaflet</a>. To create your own visualization, go to <a href="https://geojson.io/">geojson.io</a>.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><category term="maps"/><summary type="html"><![CDATA[this is what included geojson code could look like]]></summary></entry></feed>